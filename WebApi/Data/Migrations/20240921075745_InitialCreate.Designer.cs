// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApi.Data;

#nullable disable

namespace WebApi.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240921075745_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebApi.Data.Entities.BillingMail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SellerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("BillingMail", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.BillingMailApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SellerApplicationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SellerApplicationId");

                    b.ToTable("BillingMailApplication", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Brand", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.BrandCategory", b =>
                {
                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.HasKey("BrandId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BrandCategory", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.CartGadget", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("integer");

                    b.Property<int>("GadgetId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("CartId", "GadgetId");

                    b.HasIndex("GadgetId");

                    b.ToTable("CartGadget", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsAdminCreated")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.DiscountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DiscountType", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.FavoriteGadget", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("GadgetId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "GadgetId");

                    b.HasIndex("GadgetId");

                    b.ToTable("FavoriteGadget", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.Gadget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("SellerId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SellerId");

                    b.ToTable("Gadget", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.GadgetImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GadgetId")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GadgetId");

                    b.ToTable("GadgetImage", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.GadgetInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DiscountAmount")
                        .HasColumnType("integer");

                    b.Property<int>("GadgetId")
                        .HasColumnType("integer");

                    b.Property<string>("GadgetName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GadgetPrice")
                        .HasColumnType("integer");

                    b.Property<int>("GadgetQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("OrderDetailId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GadgetId");

                    b.HasIndex("OrderDetailId");

                    b.ToTable("GadgetInformation", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.GadgetRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GadgetName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("SellerId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("GadgetRequest", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.GadgetRequestBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("integer");

                    b.Property<string>("BrandName")
                        .HasColumnType("text");

                    b.Property<int>("GadgetRequestId")
                        .HasColumnType("integer");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("GadgetRequestId")
                        .IsUnique();

                    b.ToTable("GadgetRequestBrand", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.GadgetRequestCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("CategoryName")
                        .HasColumnType("text");

                    b.Property<int>("GadgetRequestId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("GadgetRequestId");

                    b.ToTable("GadgetRequestCategory", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.GadgetRequestSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GadgetRequestId")
                        .HasColumnType("integer");

                    b.Property<int?>("SpecificationDefinitionId")
                        .HasColumnType("integer");

                    b.Property<string>("SpecificationDefinitionName")
                        .HasColumnType("text");

                    b.Property<int?>("SpecificationUnitId")
                        .HasColumnType("integer");

                    b.Property<int?>("SpecificationValueId")
                        .HasColumnType("integer");

                    b.Property<string>("SpecificationValueValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GadgetRequestId");

                    b.HasIndex("SpecificationDefinitionId");

                    b.HasIndex("SpecificationUnitId");

                    b.HasIndex("SpecificationValueId");

                    b.ToTable("GadgetRequestSpecification", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.KeywordHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("KeywordHistory", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSent")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DiscountAmount")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.SearchHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GadgetId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GadgetId");

                    b.HasIndex("UserId");

                    b.ToTable("SearchHistory", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.Seller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BusinessModel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BusinessRegistrationCertificateUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShopAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Seller", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.SellerApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BusinessModel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BusinessRegistrationCertificateUrl")
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RejectReason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShopAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SellerApplication", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.SellerPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BannerUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SellerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SellerId")
                        .IsUnique();

                    b.ToTable("SellerPage", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.SellerPageImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SellerPageId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SellerPageId");

                    b.ToTable("SellerPageImage", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.SpecificationDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SellerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SellerId");

                    b.ToTable("SpecificationDefinition", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.SpecificationUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SpecificationUnit", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.SpecificationValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("SellerId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecificationDefinitionId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecificationUnitId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.HasIndex("SpecificationDefinitionId");

                    b.HasIndex("SpecificationUnitId");

                    b.ToTable("SpecificationValue", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<string>("CCCD")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("LoginMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 9, 14, 5, 37, 42, 345, DateTimeKind.Utc),
                            Email = "admin1@gmail.com",
                            FullName = "Admin 1",
                            LoginMethod = "Default",
                            Password = "5wJ0xMM/o1DPaTby8haqjIeEx0hqnJfyw4SmivYCGT17khWSPTXkR+56laWZr3/U",
                            Role = "Admin",
                            Status = "Active",
                            UpdatedAt = new DateTime(2023, 9, 14, 5, 37, 42, 345, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 9, 14, 5, 37, 42, 345, DateTimeKind.Utc),
                            Email = "admin2@gmail.com",
                            FullName = "Admin 2",
                            LoginMethod = "Default",
                            Password = "5wJ0xMM/o1DPaTby8haqjIeEx0hqnJfyw4SmivYCGT17khWSPTXkR+56laWZr3/U",
                            Role = "Admin",
                            Status = "Active",
                            UpdatedAt = new DateTime(2023, 9, 14, 5, 37, 42, 345, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 9, 14, 5, 37, 42, 345, DateTimeKind.Utc),
                            Email = "admin3@gmail.com",
                            FullName = "Admin 3",
                            LoginMethod = "Default",
                            Password = "5wJ0xMM/o1DPaTby8haqjIeEx0hqnJfyw4SmivYCGT17khWSPTXkR+56laWZr3/U",
                            Role = "Admin",
                            Status = "Active",
                            UpdatedAt = new DateTime(2023, 9, 14, 5, 37, 42, 345, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("WebApi.Data.Entities.UserVerify", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("VerifyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserVerify", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.Voucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DiscountTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxAmount")
                        .HasColumnType("integer");

                    b.Property<int>("MinAmount")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("SellerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.Property<int>("VoucherTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DiscountTypeId");

                    b.HasIndex("SellerId");

                    b.HasIndex("VoucherTypeId");

                    b.ToTable("Voucher", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.VoucherType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VoucherType", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.VoucherUser", b =>
                {
                    b.Property<int>("VoucherId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("VoucherId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("VoucherUser", (string)null);
                });

            modelBuilder.Entity("WebApi.Data.Entities.BillingMail", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Seller", "Seller")
                        .WithMany("BillingMails")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("WebApi.Data.Entities.BillingMailApplication", b =>
                {
                    b.HasOne("WebApi.Data.Entities.SellerApplication", "SellerApplication")
                        .WithMany("BillingMailApplications")
                        .HasForeignKey("SellerApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SellerApplication");
                });

            modelBuilder.Entity("WebApi.Data.Entities.BrandCategory", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Brand", "Brand")
                        .WithMany("BrandCategories")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.Category", "Category")
                        .WithMany("BrandCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Cart", b =>
                {
                    b.HasOne("WebApi.Data.Entities.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("WebApi.Data.Entities.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Data.Entities.CartGadget", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Cart", "Cart")
                        .WithMany("CartGadgets")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.Gadget", "Gadget")
                        .WithMany("CartGadgets")
                        .HasForeignKey("GadgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Gadget");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Category", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("WebApi.Data.Entities.FavoriteGadget", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Gadget", "Gadget")
                        .WithMany("FavoriteGadgets")
                        .HasForeignKey("GadgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.User", "User")
                        .WithMany("FavoriteGadgets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gadget");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Gadget", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Brand", "Brand")
                        .WithMany("Gadgets")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.Category", "Category")
                        .WithMany("Gadgets")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.Seller", "Seller")
                        .WithMany("Gadgets")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("WebApi.Data.Entities.GadgetImage", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Gadget", "Gadget")
                        .WithMany("GadgetImages")
                        .HasForeignKey("GadgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gadget");
                });

            modelBuilder.Entity("WebApi.Data.Entities.GadgetInformation", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Gadget", "Gadget")
                        .WithMany("GadgetInformation")
                        .HasForeignKey("GadgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.OrderDetail", "OrderDetail")
                        .WithMany("GadgetInformation")
                        .HasForeignKey("OrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gadget");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("WebApi.Data.Entities.GadgetRequest", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Seller", "Seller")
                        .WithMany("GadgetRequests")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("WebApi.Data.Entities.GadgetRequestBrand", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Brand", "Brand")
                        .WithMany("GadgetsRequestBrands")
                        .HasForeignKey("BrandId");

                    b.HasOne("WebApi.Data.Entities.GadgetRequest", "GadgetRequest")
                        .WithOne("GadgetRequestBrand")
                        .HasForeignKey("WebApi.Data.Entities.GadgetRequestBrand", "GadgetRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("GadgetRequest");
                });

            modelBuilder.Entity("WebApi.Data.Entities.GadgetRequestCategory", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Category", "Category")
                        .WithMany("GadgetRequestCategories")
                        .HasForeignKey("CategoryId");

                    b.HasOne("WebApi.Data.Entities.GadgetRequest", "GadgetRequest")
                        .WithMany("GadgetRequestCategories")
                        .HasForeignKey("GadgetRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("GadgetRequest");
                });

            modelBuilder.Entity("WebApi.Data.Entities.GadgetRequestSpecification", b =>
                {
                    b.HasOne("WebApi.Data.Entities.GadgetRequest", "GadgetRequest")
                        .WithMany("GadgetRequestSpecifications")
                        .HasForeignKey("GadgetRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.SpecificationDefinition", "SpecificationDefinition")
                        .WithMany("GadgetRequestSpecifications")
                        .HasForeignKey("SpecificationDefinitionId");

                    b.HasOne("WebApi.Data.Entities.SpecificationUnit", "SpecificationUnit")
                        .WithMany("GadgetRequestSpecifications")
                        .HasForeignKey("SpecificationUnitId");

                    b.HasOne("WebApi.Data.Entities.SpecificationValue", "SpecificationValue")
                        .WithMany("GadgetRequestSpecifications")
                        .HasForeignKey("SpecificationValueId");

                    b.Navigation("GadgetRequest");

                    b.Navigation("SpecificationDefinition");

                    b.Navigation("SpecificationUnit");

                    b.Navigation("SpecificationValue");
                });

            modelBuilder.Entity("WebApi.Data.Entities.KeywordHistory", b =>
                {
                    b.HasOne("WebApi.Data.Entities.User", "User")
                        .WithMany("KeywordHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Notification", b =>
                {
                    b.HasOne("WebApi.Data.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Order", b =>
                {
                    b.HasOne("WebApi.Data.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Data.Entities.OrderDetail", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SearchHistory", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Gadget", "Gadget")
                        .WithMany("SearchHistories")
                        .HasForeignKey("GadgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.User", "User")
                        .WithMany("SearchHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gadget");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Seller", b =>
                {
                    b.HasOne("WebApi.Data.Entities.User", "User")
                        .WithOne("Seller")
                        .HasForeignKey("WebApi.Data.Entities.Seller", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SellerApplication", b =>
                {
                    b.HasOne("WebApi.Data.Entities.User", "User")
                        .WithMany("SellerApplications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SellerPage", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Seller", "Seller")
                        .WithOne("SellerPage")
                        .HasForeignKey("WebApi.Data.Entities.SellerPage", "SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SellerPageImage", b =>
                {
                    b.HasOne("WebApi.Data.Entities.SellerPage", "SellerPage")
                        .WithMany("Images")
                        .HasForeignKey("SellerPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SellerPage");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SpecificationDefinition", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Category", "Category")
                        .WithMany("SpecificationDefinitions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.Seller", "Seller")
                        .WithMany("SpecificationDefinitions")
                        .HasForeignKey("SellerId");

                    b.Navigation("Category");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SpecificationValue", b =>
                {
                    b.HasOne("WebApi.Data.Entities.Seller", "Seller")
                        .WithMany("SpecificationValues")
                        .HasForeignKey("SellerId");

                    b.HasOne("WebApi.Data.Entities.SpecificationDefinition", "SpecificationDefinition")
                        .WithMany("SpecificationValues")
                        .HasForeignKey("SpecificationDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.SpecificationUnit", "SpecificationUnit")
                        .WithMany("SpecificationValues")
                        .HasForeignKey("SpecificationUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");

                    b.Navigation("SpecificationDefinition");

                    b.Navigation("SpecificationUnit");
                });

            modelBuilder.Entity("WebApi.Data.Entities.UserVerify", b =>
                {
                    b.HasOne("WebApi.Data.Entities.User", "User")
                        .WithMany("UserVerify")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Voucher", b =>
                {
                    b.HasOne("WebApi.Data.Entities.DiscountType", "DiscountType")
                        .WithMany("Vouchers")
                        .HasForeignKey("DiscountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.Seller", "Seller")
                        .WithMany("Vouchers")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.VoucherType", "VoucherType")
                        .WithMany("Vouchers")
                        .HasForeignKey("VoucherTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscountType");

                    b.Navigation("Seller");

                    b.Navigation("VoucherType");
                });

            modelBuilder.Entity("WebApi.Data.Entities.VoucherUser", b =>
                {
                    b.HasOne("WebApi.Data.Entities.User", "User")
                        .WithMany("VoucherUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Data.Entities.Voucher", "Voucher")
                        .WithMany("VoucherUsers")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Brand", b =>
                {
                    b.Navigation("BrandCategories");

                    b.Navigation("Gadgets");

                    b.Navigation("GadgetsRequestBrands");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Cart", b =>
                {
                    b.Navigation("CartGadgets");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Category", b =>
                {
                    b.Navigation("BrandCategories");

                    b.Navigation("Children");

                    b.Navigation("GadgetRequestCategories");

                    b.Navigation("Gadgets");

                    b.Navigation("SpecificationDefinitions");
                });

            modelBuilder.Entity("WebApi.Data.Entities.DiscountType", b =>
                {
                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Gadget", b =>
                {
                    b.Navigation("CartGadgets");

                    b.Navigation("FavoriteGadgets");

                    b.Navigation("GadgetImages");

                    b.Navigation("GadgetInformation");

                    b.Navigation("SearchHistories");
                });

            modelBuilder.Entity("WebApi.Data.Entities.GadgetRequest", b =>
                {
                    b.Navigation("GadgetRequestBrand");

                    b.Navigation("GadgetRequestCategories");

                    b.Navigation("GadgetRequestSpecifications");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("WebApi.Data.Entities.OrderDetail", b =>
                {
                    b.Navigation("GadgetInformation");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Seller", b =>
                {
                    b.Navigation("BillingMails");

                    b.Navigation("GadgetRequests");

                    b.Navigation("Gadgets");

                    b.Navigation("SellerPage");

                    b.Navigation("SpecificationDefinitions");

                    b.Navigation("SpecificationValues");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SellerApplication", b =>
                {
                    b.Navigation("BillingMailApplications");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SellerPage", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SpecificationDefinition", b =>
                {
                    b.Navigation("GadgetRequestSpecifications");

                    b.Navigation("SpecificationValues");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SpecificationUnit", b =>
                {
                    b.Navigation("GadgetRequestSpecifications");

                    b.Navigation("SpecificationValues");
                });

            modelBuilder.Entity("WebApi.Data.Entities.SpecificationValue", b =>
                {
                    b.Navigation("GadgetRequestSpecifications");
                });

            modelBuilder.Entity("WebApi.Data.Entities.User", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("FavoriteGadgets");

                    b.Navigation("KeywordHistories");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("SearchHistories");

                    b.Navigation("Seller");

                    b.Navigation("SellerApplications");

                    b.Navigation("UserVerify");

                    b.Navigation("VoucherUsers");
                });

            modelBuilder.Entity("WebApi.Data.Entities.Voucher", b =>
                {
                    b.Navigation("VoucherUsers");
                });

            modelBuilder.Entity("WebApi.Data.Entities.VoucherType", b =>
                {
                    b.Navigation("Vouchers");
                });
#pragma warning restore 612, 618
        }
    }
}
